import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Random;
import java.util.StringTokenizer;

//ConsoleRoullete: is a popular casino game.This is a simple command
//	line version of the game

//Create a public class FileNameReader which is used to read
//	names from a file
class FileNameReader{
	
	//String fileLoc ;
	
	//Testing the git UI

	//Create an ArrayList reference variable
	private ArrayList<String> nameCollection;

	
	//Create a method that will be able to read from a file 
	//	store the names in an ArrayList data structure
	public void loadNames(){
		
		//Create a local variable
		String line;
	
		nameCollection = new ArrayList <String>();
		
	

		try{
			//Create a File Object to store the file
			//for processing
			File file = new File("C:\\Users\\iCafe03\\git\\GameStudio\\BetApp\\src\\Names.txt");

			//Check if the file exist and that it is readable
			if(file.exists() && file.canRead()){

				//Create a BufferedReader object wraped around
				//	a FileReader object with file name
				BufferedReader fileReader = new BufferedReader(new FileReader(file));
			
				//read a line from the file
				line = fileReader.readLine();
		

				//enter a loop for iteration
				while(line != null){

					//add a name unto the local data structure
					nameCollection.add(line);	

					//read a line 
					line = fileReader.readLine();

				}//Closed While Loop
				
				fileReader.close();
			}}catch(IOException ioe){

			System.out.println("Opps: Seens like we hit an obstale");

		}//closed catched exteception

	}//closed method
	
	
	//fetchData :stores the names which have been collected
	//	into an ArrayList data Structure
	public ArrayList<String> fetchData(){

		//return the collection
		return nameCollection;

	}//closed fetchData method

}//closed the FileNameReader class



//Create class ConsouleRoullete which handles the betting operations
//of the game
class ConsouleRoullete{

//Create arrays to store the data of the betting

String[] Names;		//Stores the names of the candindates
double[] Bet;		//how much each candidate has bet
boolean WinCollection[];//The collection of Wins and Loss represented by true and false
double[] WinAmmount;	//The amount the candidate wins after the Bet stored here
int BetNumber[];	//The number that the candidate chose to bet
int outcomeBetNumber[];	//The outcome of the bet which is generated by a Random number
ArrayList<String> loadedNames;//Used to store the names which have been loaded from the file
//Create a random generator object
Random randomN = new Random();

//Create a method that collectes names from the FileNameReader class
public void loadNames(){

	//Create an object of file name reader
	FileNameReader fileReader = new FileNameReader();

	//load the names from the FileNameReader object
	fileReader.loadNames();

	//fetch the data from the FileReaderObject
	loadedNames = fileReader.fetchData();

	//Create a for loop for storing the names in the ArrayList loadNames
	//	to an Names[] arrray
	Names = new String[loadedNames.size()];


	for(int i = 0 ; i < loadedNames.size();i++){

		Names[i] = loadedNames.get(i);


	}//closed for loop

}//closed method


//Create method that displays a name and allows a user to enter information
//	and the user input is than collected
public void promptNCollect() {
	String line;

	//Create an input stream and attach it to
	//	standard InputStream
	
	BufferedReader keyboard = new BufferedReader(new InputStreamReader( System.in));
	
	//Create a numberformat object
	NumberFormat formatN = NumberFormat.getInstance();
	
	//Create a for loop for iterating through the contents
	

	
	loadNames();
	
	//Names = new String[Names.length];		
	Bet  = new double[Names.length];
	WinCollection= new boolean[Names.length];
	WinAmmount  = new double[Names.length];;	//The amount the candidate wins after the Bet stored here
	BetNumber  = new int[Names.length];	//The number that the candidate chose to bet


	
	for(int i = 0;i< Names.length;i++) {
		
		String tempPlaceHolder;
		
		System.out.println(Names[i] +" ");
		System.out.flush();
		
		
		
		try {
			
		line = keyboard.readLine();
		StringTokenizer tokenizer = new StringTokenizer(line);
		
		
		tempPlaceHolder = tokenizer.nextToken();
		if(tempPlaceHolder.equals("EVEN") || tempPlaceHolder.equals("even") ) {
			
			
			
			BetNumber[i] = 0;
			
			try {
				
			
			Bet[i] = formatN.parse(tokenizer.nextToken()).doubleValue();
			
			}catch(Exception e) {
				
				System.out.println("Seems like we hit an obstacle:" + e);
				
			}
			
		}else if (tempPlaceHolder.equals("ODD") || tempPlaceHolder.equals("EVEN") ) {
			
			BetNumber[i] = 37;
			
			
			try {
				
			
			Bet[i] = formatN.parse(tokenizer.nextToken()).doubleValue();
			
			}catch(Exception e) {
				
				System.out.println("Seems like we hit an obstacle: " + e);
				
			}
			
		}else {
			
			
			
			try {
				
				BetNumber[i] = formatN.parse(line).intValue();
				
			    Bet[i] = formatN.parse(tokenizer.nextToken()).doubleValue();
			
			
			}catch(Exception e) {
				
				System.out.println("Seems like we hit an obstacle: here " + e);
				
			}
			
		}
		
		
		
		
		}catch(IOException ioe) {
			
			System.out.println("Seems like we hit an obstacle" + ioe);
			
		}//closed an excption
		
		
	}
	
}



//Create a method generateN which generates numbers from 1 to 36
public int generateN(){

	int N = 0;
	long timeStart = System.currentTimeMillis();
	long timeEnd = timeStart +30000;
	
	while(System.currentTimeMillis() < timeEnd) {
	
	N = randomN.nextInt(37);
	
	}
	return N;

}

//processBet
public void processBet(int N) {
	boolean win = false;
	outcomeBetNumber  = new int[Names.length];

	//Create a for loop
	for(int k = 0; k < BetNumber.length ;k++) {
		
	 outcomeBetNumber[k] = N;

		//Check if bet number at k == N
		if(BetNumber[k] == N) {
			
			win = true;
			WinCollection[k] = win;
			outcomeBetNumber[k] = N;
			//calculate the amount won
			double amountAfter = Bet[k] * 36;
			WinAmmount[k] = amountAfter;
			
		}else if (N % 2 == 0) {
			
			if(BetNumber[k] == 0){
				
				win = true;
				WinCollection[k] = win;
				outcomeBetNumber[k] = N;
				
				//calculate the amount won
				double amountAfter = Bet[k] * 2;
				WinAmmount[k] = amountAfter;
				
			}
			
		}else if(N % 2 != 0){
			
			 if(BetNumber[k] == 37) {
				 
					win = true;
					WinCollection[k] = win;
					outcomeBetNumber[k] = N;
					
					//calculate the amount won
					double amountAfter = Bet[k] * 2;
					WinAmmount[k] = amountAfter;
				 
			 }
			
		}else {
			
			win = false;
			WinCollection[k] = win;
			outcomeBetNumber[k] = N;
			
			//calculate the amount won
			double amountAfter = Bet[k] * 0.0;
			WinAmmount[k] = amountAfter;

			
		}
		
	}
	
}

//Create a method for performing bet operations
public void bet(){

	int N = 0;

	
	//create a for loop that iterates 4 times 
	for(int i = 0 ; i < 4 ; i++){
		

		promptNCollect();

		N = generateN();
		
		processBet(N);
		
		displayData(i);
		System.out.println();
		System.out.println("\033[H\033[2J");
		System.out.println();
		
		}
	

	
	
	}

 



//create a method for displaying the data
public void displayData(int i){

	String win = "WIN";
	String lose = "LOSE";

	//Display to the console
	System.out.println("Number: " + (i + 1));
	System.out.println("---");
	System.out.println("Player"+"\t"+"Bet"+"\t"+"Outcome"+"\t"+"winnings");
	System.out.println("---");	
	//create a for loop for iterating over the contents

	for(int  k = 0 ; k < Names.length;k++){

		if(WinCollection[i] == true){

			System.out.println(Names[k]+"\t"+Bet[k]+"\t"+outcomeBetNumber[k]+"\t"+win);
		}else{

			System.out.println(Names[k]+"\t"+Bet[k]+"\t"+outcomeBetNumber[k]+"\t"+lose);
		}//close else statement

	}//closed for loop

}

}//closed ConsouleRoullete class

public class ConsoleRoulette{

	public static void main(String...args){
	
		//Create an instance of ConsouleRoullete class
		ConsouleRoullete play = new ConsouleRoullete();
		
		//run the application
		play.bet();

	}

}
